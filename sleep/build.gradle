plugins {
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'com.noom.interview.fullstack'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.instancio:instancio-core:5.1.0'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    implementation 'org.springdoc:springdoc-openapi-security:1.6.14'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-55:3.9.0'

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    compileOnly 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2:2.3.232'
    testImplementation 'org.mockito:mockito-core:5.0.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    jvmArgs '-Duser.timezone=UTC'
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        html.required = true
        csv.required = false
    }

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                'com/noom/interview/fullstack/sleep/controller/**',
                'com/noom/interview/fullstack/sleep/config/**',
                'com/noom/interview/fullstack/sleep/constant/**',
                'com/noom/interview/fullstack/sleep/exception/**',
                'com/noom/interview/fullstack/sleep/entity/**',
                'com/noom/interview/fullstack/sleep/dto/**',
                'com/noom/interview/fullstack/sleep/model/**',
                'com/noom/interview/fullstack/sleep/security/**',
                'com/noom/interview/fullstack/sleep/SleepApplication.class'
        ])
    }))
}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

check.dependsOn jacocoTestReport
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}
